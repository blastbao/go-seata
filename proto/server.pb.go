// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/server.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/server.proto", fileDescriptor_98d161fbd54d4312) }

var fileDescriptor_98d161fbd54d4312 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0xd2, 0x2f,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52,
	0xdc, 0x05, 0x49, 0xfa, 0x25, 0xc9, 0x10, 0x31, 0xa3, 0x49, 0x4c, 0x5c, 0x1c, 0x21, 0xc9, 0xc1,
	0x60, 0x65, 0x42, 0x6e, 0x5c, 0x3c, 0xee, 0x39, 0xf9, 0x49, 0x89, 0x39, 0xce, 0xf9, 0xb9, 0xb9,
	0x99, 0x25, 0x42, 0x52, 0x10, 0x45, 0x7a, 0xc8, 0x82, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x52, 0x12, 0x58, 0xe5, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x84, 0x7c, 0xb8, 0xf8, 0x20, 0xc2, 0x41,
	0xf9, 0x39, 0x39, 0x49, 0x89, 0xc9, 0xd9, 0x42, 0x32, 0x28, 0xaa, 0x61, 0xc2, 0x30, 0xb3, 0xa4,
	0x70, 0xc8, 0x42, 0x4c, 0xb3, 0xe2, 0xe2, 0x08, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x49, 0x2d, 0x12,
	0x12, 0x83, 0xaa, 0x84, 0x09, 0xc0, 0x4c, 0x10, 0xc1, 0x10, 0x87, 0xe8, 0x35, 0xe1, 0x62, 0x0b,
	0x4a, 0x2d, 0xc8, 0x2f, 0x2a, 0x11, 0x42, 0xa8, 0x00, 0x71, 0x61, 0xfa, 0x84, 0xd0, 0x44, 0xc1,
	0xba, 0x92, 0xd8, 0xc0, 0x82, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x58, 0x8b, 0xe1,
	0x42, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TcServerClient is the client API for TcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TcServerClient interface {
	//    rpc Start (StartRequest) returns (StartReply) {}
	GlobalCommit(ctx context.Context, in *GlobalCommitRequest, opts ...grpc.CallOption) (*GlobalCommitReply, error)
	GlobalRollback(ctx context.Context, in *GlobalRollbackRequest, opts ...grpc.CallOption) (*GlobalRollbackReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
}

type tcServerClient struct {
	cc *grpc.ClientConn
}

func NewTcServerClient(cc *grpc.ClientConn) TcServerClient {
	return &tcServerClient{cc}
}

func (c *tcServerClient) GlobalCommit(ctx context.Context, in *GlobalCommitRequest, opts ...grpc.CallOption) (*GlobalCommitReply, error) {
	out := new(GlobalCommitReply)
	err := c.cc.Invoke(ctx, "/proto.TcServer/GlobalCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcServerClient) GlobalRollback(ctx context.Context, in *GlobalRollbackRequest, opts ...grpc.CallOption) (*GlobalRollbackReply, error) {
	out := new(GlobalRollbackReply)
	err := c.cc.Invoke(ctx, "/proto.TcServer/GlobalRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcServerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/proto.TcServer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcServerClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, "/proto.TcServer/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcServerServer is the server API for TcServer service.
type TcServerServer interface {
	//    rpc Start (StartRequest) returns (StartReply) {}
	GlobalCommit(context.Context, *GlobalCommitRequest) (*GlobalCommitReply, error)
	GlobalRollback(context.Context, *GlobalRollbackRequest) (*GlobalRollbackReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Report(context.Context, *ReportRequest) (*ReportReply, error)
}

// UnimplementedTcServerServer can be embedded to have forward compatible implementations.
type UnimplementedTcServerServer struct {
}

func (*UnimplementedTcServerServer) GlobalCommit(ctx context.Context, req *GlobalCommitRequest) (*GlobalCommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalCommit not implemented")
}
func (*UnimplementedTcServerServer) GlobalRollback(ctx context.Context, req *GlobalRollbackRequest) (*GlobalRollbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalRollback not implemented")
}
func (*UnimplementedTcServerServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedTcServerServer) Report(ctx context.Context, req *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}

func RegisterTcServerServer(s *grpc.Server, srv TcServerServer) {
	s.RegisterService(&_TcServer_serviceDesc, srv)
}

func _TcServer_GlobalCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServerServer).GlobalCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TcServer/GlobalCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServerServer).GlobalCommit(ctx, req.(*GlobalCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcServer_GlobalRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServerServer).GlobalRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TcServer/GlobalRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServerServer).GlobalRollback(ctx, req.(*GlobalRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TcServer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcServer_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServerServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TcServer/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServerServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TcServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TcServer",
	HandlerType: (*TcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GlobalCommit",
			Handler:    _TcServer_GlobalCommit_Handler,
		},
		{
			MethodName: "GlobalRollback",
			Handler:    _TcServer_GlobalRollback_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TcServer_Register_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _TcServer_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/server.proto",
}
